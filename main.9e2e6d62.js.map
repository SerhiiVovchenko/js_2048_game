{"version":3,"sources":["scripts/main.js"],"names":["newDesk","gameFieldRows","document","querySelector","startGameButton","score","messageLose","messageWin","messageStart","defaultDesk","desk","winningValue","scoreNum","cellsInLine","winSituation","gamaField","children","map","row","addTwo","findEmptyCell","y","x","randomNumber","emptyCell","forEach","rowIndex","cell","cellIndex","push","Math","floor","random","length","rendering","element","classList","innerText","add","moved","e","key","renewalState","left","right","i","j","remove","removeEventListener","isCellMove","checkRows","newRow","filter","splice","concat","Array","fill","reverseGameRows","reverse","_","checkColumns","checkZero","some","checkInd","a","b","addEventListener","contains","toggle"],"mappings":"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","file":"main.9e2e6d62.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst gameFieldRows = document.querySelector('tbody');\nconst startGameButton = document.querySelector('button');\nconst score = document.querySelector('.game-score');\n\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst messageStart = document.querySelector('.message-start');\n\nconst defaultDesk = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nlet desk = defaultDesk;\nlet newDesk;\nconst winningValue = 2048;\nlet scoreNum = 0;\nconst cellsInLine = 4;\nlet winSituation = false;\n\nconst gamaField = [...gameFieldRows.children].map(row => [...row.children]);\n\nstartGameButton.addEventListener('click', () => {\n  document.addEventListener('keydown', moved);\n\n  if (startGameButton.classList.contains('start')) {\n    startGameButton.classList.remove('start');\n    startGameButton.classList.add('restart');\n    startGameButton.innerText = 'Restart';\n    messageStart.classList.add('hidden');\n  } else {\n    desk = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    scoreNum = 0;\n    messageLose.classList.toggle('hidden', true);\n    messageWin.classList.toggle('hidden', true);\n  }\n\n  addTwo();\n  addTwo();\n  rendering();\n});\n\ndocument.addEventListener('keydown', moved);\n\nfunction addTwo() {\n  const [y, x] = findEmptyCell();\n\n  desk[y][x] = randomNumber();\n};\n\nfunction findEmptyCell() {\n  const emptyCell = [];\n\n  desk.forEach((row, rowIndex) => {\n    row.forEach((cell, cellIndex) => {\n      if (cell === 0) {\n        emptyCell.push([rowIndex, cellIndex]);\n      }\n    });\n  });\n\n  return emptyCell[Math.floor(Math.random() * emptyCell.length)];\n};\n\nfunction randomNumber() {\n  return Math.random() >= 0.9 ? 4 : 2;\n};\n\nfunction rendering() {\n  desk.forEach((row, rowIndex) => {\n    row.forEach((cell, cellIndex) => {\n      const element = gamaField[rowIndex][cellIndex];\n\n      element.classList = 'field-cell';\n\n      if (cell === 0) {\n        element.innerText = '';\n      } else {\n        element.innerText = cell;\n        element.classList.add(`field-cell--${cell}`);\n      }\n    });\n  });\n\n  score.innerText = scoreNum;\n};\n\nfunction moved(e) {\n  newDesk = desk;\n\n  switch (e.key) {\n    case 'ArrowUp':\n      renewalState();\n      left();\n      renewalState();\n      break;\n    case 'ArrowDown':\n      renewalState();\n      right();\n      renewalState();\n      break;\n    case 'ArrowLeft':\n      left();\n      break;\n    case 'ArrowRight':\n      right();\n      break;\n  }\n\n  for (let i = 0; i < cellsInLine; i++) {\n    for (let j = 0; j < cellsInLine; j++) {\n      if (newDesk[i][j] !== desk[i][j]) {\n        desk = newDesk;\n\n        addTwo();\n        rendering();\n\n        if (winSituation) {\n          messageWin.classList.remove('hidden');\n          document.removeEventListener('keydown', moved);\n          winSituation = false;\n\n          return;\n        }\n\n        if (!isCellMove()) {\n          messageLose.classList.remove('hidden');\n        }\n\n        return;\n      }\n    }\n  }\n};\n\nfunction left() {\n  if (!checkRows()) {\n    return;\n  }\n\n  newDesk = newDesk.map(row => {\n    const newRow = row.filter(cell => cell !== 0);\n\n    newRow.forEach((cell, cellIndex) => {\n      if (cell === newRow[cellIndex + 1]) {\n        newRow[cellIndex] *= 2;\n        newRow.splice(cellIndex + 1, 1);\n        scoreNum += newRow[cellIndex];\n\n        if (newRow[cellIndex] === winningValue) {\n          winSituation = true;\n        }\n      }\n    });\n\n    return newRow.concat(Array(cellsInLine - newRow.length).fill(0));\n  });\n};\n\nfunction reverseGameRows() {\n  newDesk.forEach(row => row.reverse());\n}\n\nfunction right() {\n  if (!checkRows()) {\n    return;\n  }\n\n  reverseGameRows();\n  left();\n  reverseGameRows();\n};\n\nfunction renewalState() {\n  newDesk = newDesk[0].map((_, cellIndex) =>\n    newDesk.map(row => row[cellIndex]));\n};\n\nfunction isCellMove() {\n  if (checkRows()) {\n    return true;\n  }\n\n  renewalState();\n\n  return checkColumns();\n};\n\nfunction checkRows() {\n  for (let i = 0; i < cellsInLine; i++) {\n    const checkZero = newDesk[i].some(cell => cell === 0);\n    const checkInd = newDesk[i].some((a, b) => a === newDesk[i][b + 1]);\n\n    if (checkZero || checkInd) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nfunction checkColumns() {\n  for (let i = 0; i < cellsInLine; i++) {\n    return newDesk[i].some((a, b) => a === newDesk[i][b + 1]);\n  }\n\n  return false;\n};\n"]}